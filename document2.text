/* eslint-disable react/prop-types */
import { Fragment, useContext, useEffect, useState } from "react";
import MultiButtonComponent from "../../button/multiButtonComponent";
import "./feed-template.css"
import { Link } from "react-router-dom";
import { FaRegHeart, FaHeart } from "react-icons/fa";
import { FeedContext } from "../../feedContextProvider/feedContextProvider";

export default function FeedTemplate({ props }) {
    const { state, setState, likePost, followUser, catchError } = useContext(FeedContext)
    const [currentState, setCurrentState] = useState({
        postLikes: props.likes,
        isLiked: false,
        postId: null,
        followings: [],
        isFollowing: false,
        likedPostHistory: []
    })

    useEffect(() => {
        let usersLikedPost = state.currentUser?.likedPosts
        if (state.isAuthenticated) {
            let usersAllLiked = [];
            if (usersLikedPost && usersLikedPost.length > 0) {
                for (let i = 0; i <= usersLikedPost.length; i++) {
                    usersAllLiked.push(usersLikedPost[i])
                }
            }
            setCurrentState(prevState => {
                return {
                    ...prevState, likedPostHistory: usersAllLiked
                }
            })
        }
    }, [state])

    function clickOnLike(postId, likeOrDislike) {
        try {
            if (!state.isAuthenticated) {
                const error = new Error("Please sign in to add post to favorites.")
                error.title = "Unauthorized access"
                throw error
            }
            likePost(postId, likeOrDislike)
            if (likeOrDislike === "like") {
                setCurrentState(prevState => {
                    return { ...prevState, postLikes: prevState.postLikes + 1, isLiked: true, postId: postId }
                })
                setState(prevState => {
                    return {
                        ...prevState, likes: prevState.likes + 1

                    };
                });
            }
            if (likeOrDislike === "dislike") {
                setCurrentState(prevState => {
                    return { ...prevState, postLikes: prevState.postLikes - 1, isLiked: false }
                })
                currentState.likedPostHistory.pop(postId);
                setState(prevState => {
                    return {
                        ...prevState, likes: prevState.likes - 1

                    }
                });
            }
        } catch (err) {
            catchError(err)
        }
    }

    useEffect(() => {
        let usersLikedPost = state.currentUser?.likedPosts
        if (state.isAuthenticated) {
            let usersAllLiked = [];
            if (usersLikedPost && usersLikedPost.length > 0) {
                for (let i = 0; i <= usersLikedPost.length; i++) {
                    usersAllLiked.push(usersLikedPost[i])
                }
            }
            setCurrentState(prevState => {
                return {
                    ...prevState, likedPostHistory: usersAllLiked
                }
            })
        }
    }, [state])
    useEffect(() => {
        let usersFollowing = state.currentUser.following?.length && state.currentUser.following
        if (state.isAuthenticated && usersFollowing) {
            let checkIsFollowing = []
            if (usersFollowing && usersFollowing.length > 0) {
                for (let i = 0; i <= usersFollowing.length; i++) {
                    if(usersFollowing[i] === props.creatorId){
                        checkIsFollowing.push(usersFollowing[i])
                    }
                }
            }
            if(checkIsFollowing.find(userId => userId === props.creatorId)){
                setCurrentState(prevState => {
                    return {
                        ...prevState, followings: checkIsFollowing, isFollowing: true
                    }
                })    
            }
        }
    }, [state.follow])


    function handleFollowUser(followOrUnfollow, followedUserId) {
        try {
            if (!state.isAuthenticated) {
                const error = new Error("Please sign in to folow user")
                error.title = "Unauthorized access"
                throw error
            }
            followUser(followOrUnfollow, followedUserId)
            if (followOrUnfollow === "follow") {
                setCurrentState(prevState => {
                    return {
                        ...prevState,
                        isFollowing: true
                    }
                })
                setState(prevState => {
                    return { ...prevState, follow: prevState.follow + 1 }
                })
            }
            if (followOrUnfollow === "unfollow") {
                setCurrentState(prevState => {
                    return { ...prevState, isFollowing: false }
                })
                currentState.followings.pop(followedUserId)
                setState(prevState => {
                    return { ...prevState, follow: prevState.follow - 1 }
                })
            }
        } catch (err) {
            catchError(err)
        }
    }
    return <Fragment>
        <div className="slam-feed-section">
            <div className="feed-template__top-section">
                <Link className="post-links">
                    <p className="author-date__section">Slammed by
                        <span className="posted-by">
                            <Link to={props.creatorId ? `/user/${props.creatorId}` : ""} style={{ color: "rgb(37, 13, 75)", border: "1px solid grey", padding: "0.15rem", borderRadius: "0.2rem" }}>{props?.creator || "Anonymuous User"}</Link>
                        </span>
                        <span className="createdAt-time">on {props?.createdAt || "23/04/2024"}</span>
                    </p>
                </Link>
                {state.user?._id !== props.creatorId && <div>
                    {
                        currentState.isFollowing ?
                            <p className="follow__unfollow follow_unfollow-extras" onClick={() => handleFollowUser("unfollow", props.creatorId)}>Unfollow</p> :
                            <p className="follow__unfollow follow_unfollow-extras" onClick={() => handleFollowUser("follow", props.creatorId)}>Follow +</p>
                    }
                </div>
                }

            </div>

            <hr />
            <div className="content-section">
                <Link className="post-links"
                    to={`/feeds/${props.postId}`}>
                    <img className="source-image" crossOrigin="" src={`https://slampost-8dd6d1d06367.herokuapp.com/${props.image}`} />
                </Link>
                <div className="post-section">
                    <Link className="post-links"
                        to={`/feeds/${props.postId}`}>
                        <h2 className="post-title">{props?.title || "Message title"}</h2>
                    </Link>
                    {
                        props.content ? <p>{props.content}</p> :
                            <p>Message Snippt goes here. This is the message content. Click to view the message details</p>
                    }
                    <div className="buttons__feed-templates">
                        <div className="like-section">
                            <div className="like-buttons">
                                {currentState.likedPostHistory.find(post => post === props.postId) || currentState.isLiked && currentState.postId === props.postId ?
                                    <p className="like" onClick={() => clickOnLike(props.postId, "dislike")}><FaHeart /></p> :
                                    <p className="dislike" onClick={() => clickOnLike(props.postId, "like")}><FaRegHeart /></p>
                                }
                            </div>
                            <p>{currentState.postLikes} Likes</p>
                        </div>
                        <MultiButtonComponent props={{
                            buttonProperties: [
                                { buttonType: "button", buttonTitle: "View", mode: "", design: "raised", buttonLink: `/feeds/${props.postId}`, buttonFunction: null },
                                { buttonType: "button", buttonTitle: props.isAuthenticated && props.userId === props.postUserId ? "Edit" : "", mode: "", design: "raised", buttonLink: null, buttonFunction: props.startEditPostHandler },
                                { buttonType: "reset", buttonTitle: props.isAuthenticated && props.userId === props.postUserId ? "Delete" : "", mode: "", design: "danger", buttonLink: null, buttonFunction: props.deletePostHandler }]

                        }} />

                    </div>
                </div>
            </div>

        </div >
    </Fragment >
}